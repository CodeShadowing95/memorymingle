import jwt from 'jsonwebtoken';

const auth = async (req, res, next) => {
  try {
    /* This line of code is extracting the token from the authorization header of the incoming request. */
    const token = req.headers.authorization.split(' ')[1];
    /* `const isCustomAuth = token.length < 500;` is checking if the length of the token is less than
    500 characters. If it is less than 500, it is considered a custom token and `isCustomAuth` is
    set to `true`. This is used to differentiate between tokens generated by the application and
    tokens generated by third-party providers like Google or Facebook, which are usually longer than
    500 characters. */
    const isCustomAuth = token.length < 500;

    let decodedData;

    if(token && isCustomAuth) {
      /* `decodedData = jwt.verify(token, 'test');` is verifying the authenticity of the token by
      decoding it using the secret key 'test'. If the token is valid, it will return the decoded
      data, which can be used to identify the user and their permissions. If the token is invalid or
      has expired, it will throw an error. */
      decodedData = jwt.verify(token, 'test');

      req.userId = decodedData?.id;
    } else {
      decodedData = jwt.verify(token);

      /* `req.userId = decodedData?.sub;` is setting the `userId` property of the `req` object to the
      value of the `sub` property of the `decodedData` object, if it exists. The `?.` is the
      optional chaining operator, which checks if the `sub` property exists before trying to access
      it. This line of code is used to identify the user and their permissions based on the decoded
      subject (sub: ID that differentiate Google user from others) ID of the token, if the token
      is not a custom token or if it is invalid. */
      req.userId = decodedData?.sub;
    }

    /* `next()` is a function that is called to pass control to the next middleware function in the
    stack. In this case, it is used to move on to the next middleware function after the
    authentication middleware has completed its task of verifying the authenticity of the token and
    setting the `userId` property of the `req` object. */
    next();
  } catch (error) {
    console.log(error);
  }
}

export default auth;